local c = {
	{
		{1156.2889, -1852.192, 14},
		{1081, -1852.1, 13},
		{1037.4, -1586.1, 13},
		{1078.0387, -1572.1869, 12.95673}
	},
	{
		{797.40057, -1245.067, 14},
		{797.6, -1309.7, 13},
		{903.4, -1324.1, 13},
		{917.18829, -1378.464, 12.79445}
	},
	{
		{250.36308, -1571.7111, 32.53857},
		{312.26462, -1584.7969, 32.51127},
		{386.35889, -1519.3209, 31.93322},
		{423.80667, -1558.5941, 26.98388}
	},
	{
		{372.35602, -1016.8682, 92.30659},
		{279.99872, -1086.1033, 84.30257},
		{176.76898, -1192.4227, 50.91138},
		{134.47893, -1273.814, 45.92126}
	},
	{
		{ -358.98389, -1113.4976, 68.83236 },
		{ -243.71512, -1025.3073, 29.42607 },
		{ -148.01288, -1031.6766, 1.06951 },
		{ -93.21645, -1169.0385, 2.12025 }
	},
	{
        { -1348.4628, 345.27322, 6.83673 },
        { -1464.6121, 353.47382, 6.83673 },
        { -1464.813, 420.27869, 6.83673 },
        { -1308.9868, 454.76865, 6.83673 }
    },
    {
        { -1917.6392, 302.55054, 40.75819 },
        { -1933.8232, 245.07008, 40.75819 },
        { -1985.7192, 250.9425, 34.88319 },
        { -1956.7228, 296.24011, 35.18006 }
    },
    {
        { -2004.2229, 1055.5016, 55.23229 },
        { -2004.1539, 862.68835, 44.95885 },
        { -1812.8853, 845.32874, 25.69009 },
        { -1755.2601, 952.42371, 24.40416 }
    },
    {
        { -1285.0244, 2296.4861, 132.42427 },
        { -1206.145, 2348.7656, 112.07758 },
        { -1267.2051, 2501.2158, 87.03143 },
        { -1328.1899, 2560.4939, 88.38928 }
    },
    {
        { -1992.2427, 2831.6851, 157.59392 },
        { -1728.9098, 2804.9792, 112.33798 },
        { -1521.6877, 2773.571, 83.70284 },
        { -1337.6833, 2679.8186, 49.87072 }
    },
	{
        { -841.62842, 2404.2571, 121.32333 },
        { -780.94116, 2524.3872, 92.46342 },
        { -728.41833, 2587.967, 69.59351 },
        { -747.4455, 2730.2156, 45.84293 }
    },
    {
        { -147.29996, 2635.8315, 63.39124 },
        { -257.6972, 2701.251, 62.25037 },
        { -369.11914, 2688.2158, 63.71479 },
        { -330.32501, 2638.6243, 63.48158 }
    },
    {
        { 85.55016, 2560.5869, 16.02916 },
        { 178.34119, 2561.5242, 16.02916 },
        { 221.98383, 2667.2207, 16.14635 },
        { 276.8371, 2729.3828, 24.27354 }
    },
    {
        { 678.59741, 2708.9241, 58.70879 },
        { 877.95294, 2674.9109, 31.33447 },
        { 860.24829, 2536.958, 29.65993 },
        { 760.14807, 2444.5493, 22.19692 }
    },
    {
        { 1385.7351, 2525.5791, 10.44201 },
        { 1386.1558, 2599.7068, 10.43972 },
        { 1476.4128, 2600.1221, 10.44201 },
        { 1477.2823, 2453.5869, 13.47819 }
    },
    {
        { 1546.8345, 2313.1938, 10.23821 },
        { 1648.7019, 2398.3584, 10.4621 },
        { 1708.9946, 2392.2036, 10.43473 },
        { 1727.364, 2285.158, 10.25625 }
    },
    {
        { 2066.4609, 1649.3433, 10.13366 },
        { 2057.5447, 1531.8193, 10.14145 },
        { 2057.4141, 1645.8413, 10.13366 },
        { 2057.4216, 1533.5745, 10.13366 }
    },
	{
		{2262.9783, -1659.1455, 14.8889},
		{2458.4551, -1658.8538, 12.95391},
		{2480.6487, -1723.0029, 13.20391},
		{2485.1985, -1782.0145, 13.20373}
	},
	{
		{2737.7488, -1100.9753, 69.17053},
		{2722.7637, -1308.8916, 51.99601},
		{2737.731, -1376.241, 39.83845},
		{2698.9194, -1507.0198, 30.2019}
	},
	{
		{2293.9292, 21.89348, 25.53291},
		{2286.1614, 90.86041, 25.53412},
		{2120.6287, 97.10716, 34.78445},
		{1976.5156, 151.63028, 32.63715}
	},
	{
		{1774.8811, 199.16907, 25.84415},
		{1645.3087, 263.11221, 18.42336},
		{1527.6747, 250.31134, 15.70376},
		{1407.5656, 212.80402, 18.04935}
	},
	{
		{965.4061, -54.16204, 78.52814},
		{814.1084, -44.43182, 54.58743},
		{697.34308, -59.26301, 24.66328},
		{637.48779, -157.1808, 26.88957}
	},
	{
		{-130.08603, -187.9267, 1.20271},
		{-97.36416, -56.46227, 2.4871},
		{-64.76173, 39.30616, 5.84648},
		{-35.90894, 110.85754, 2.4871}
	},
	{
		{-130.01834, -188.31717, 1.44136},
		{-107.63865, -87.07576, 2.57119},
		{-49.4735, 25.39979, 2.57898},
		{-35.55928, 110.46707, 2.78137}
	},
	{
		{-129.36154, -187.75618, 1.96044},
		{-107.55879, -87.57497, 3.23494},
		{-75.62075, 67.11999, 3.24273},
		{-33.25137, 109.92481, 3.24273}
	},
	{
		{-807.01147, -111.73946, 63.59888},
		{-943.54956, -217.99152, 39.94183},
		{-630.50439, -258.01562, 64.32288},
		{-177.72498, -348.91364, 1.19096}
	},
	{
        {864.66345, 863.8255, 13.00079},
        {761.89362, 778.99902, -1.40652},
        {644.23828, 748.75537, -11.83671},
        {483.12964, 876.35248, -31.05922}
    },
    {
        {863.71899, 865.86115, 13.01354},
        {757.5094, 894.07971, -1.57248},
        {679.23169, 968.37061, -13.02253},
        {483.13626, 883.12463, -30.94045}
    },
    {
        {863.36353, 867.4707, 13.15978},
        {732.7655, 828.51459, -18.85883},
        {638.38629, 825.93683, -40.42255},
        {482.47107, 879.82227, -30.81218}
    },
    {
        {663.57721, 950.34186, -34.69229},
        {496.16422, 886.78821, -32.19466},
        {604.94354, 790.71521, -32.49572},
        {644.66083, 950.59485, -35.17572}
    },
    {
        {122.72165, 692.44403, 5.22709},
        {-60.71021, 632.11841, 5.74676},
        {-125.31279, 547.66675, 6.03143},
        {-193.53426, 604.927, 3.60025}
    },
    {
        {-303.52621, 1526.7229, 75.05793},
        {-306.6076, 1396.1583, 71.99458},
        {-369.58835, 1463.4807, 62.51677},
        {-416.70801, 1365.3257, 29.46377}
    },
    {
        {-479.92502, 1932.6567, 85.61057},
        {-452.4227, 1766.4972, 71.41624},
        {-424.93472, 1867.4082, 62.13657},
        {-314.33923, 1862.1957, 41.28906}
    },
    {
        {-247.97235, 1926.6523, 51.09612},
        {-277.8222, 2048.5471, 57.93528},
        {-326.96982, 2143.5999, 46.79047},
        {-369.73468, 2227.001, 41.48438}
    },
    {
        {2008.8379, 1767.9773, 10.27214},
        {1920.2557, 1748.1096, 18.30419},
        {1885.6254, 1797.2985, 18.53266},
        {2009.5292, 1768.7217, 10.27871}
    },
	{
        {2642.9966, -1485.3666, 29.91666 },
        {2628.1409, -1616.3595, 10.16865 },
        {2599.3257, -1808.54, 1.30387 },
        {2472.5969, -1850.4672, 1.33234 }
    },
    {
        {2824.1345, -1849.9055, 10.66489 },
        {2674.5674, -1831.2827, 9.12313 },
        {2657.2578, -1718.3188, 9.06373 },
        {2667.3208, -1615.8574, 17.03646 }
    },
    {
        {2225.1919, -2494.1646, 13.14514 },
        {2261.9651, -2662.1853, 13.2028 },
        {2444.698, -2663.1509, 13.31799 },
        {2485.5225, -2539.8035, 13.33466 }
    },
    {
        {1611.9552, -2319.2805, 12.94915 },
        {1797.877, -2310.1431, 12.94915 },
        {1749.6512, -2253.8862, -1.88425 },
        {1732.6105, -2306.7981, -3.28523 }
    },
    {
        {1125.4753, -2149.7578, 71.09482 },
        {1244.5295, -2102.1584, 57.6562 },
        {1316.4604, -2110.8579, 48.25692 },
        {1421.4882, -2089.8586, 41.31135 }
    },
    {
        {917.53265, -1529.3126, 13.00469 },
        {865.33527, -1512.631, 13.17694 },
        {804.1463, -1491.2014, 13.16988 },
        {715.74176, -1483.4067, 1.59062 }
    },
    {
        {691.78162, -833.42639, 42.24064 },
        {664.68665, -600.51971, 15.73111 },
        {602.18237, -522.04199, 15.73111 },
        {599.02997, -415.11642, 20.50957 }
    },
    {
        {252.30333, -371.80069, 8.50842 },
        {379.47226, -321.83575, 13.59511 },
        {530.36707, -212.58333, 15.69225 },
        {783.50519, -165.98747, 18.29889 }
    },
    {
        {2638.3762, 1472.625, 10.04156 },
        {2555.0449, 1517.8042, 9.67188 },
        {2505.7551, 1600.318, 9.81771 },
        {2435.1135, 1661.7874, 14.64146 }
    },
    {
        {2350.2742, 1898.0906, 10.40347 },
        {2350.1807, 2120.6589, 10.29546 },
        {2271.5586, 2149.6379, 10.28537 },
        {2166.7144, 2136.6104, 10.28537 }
    },
    {
        {398.16516, 2764.314, 81.94642 },
        {525.13782, 2715.4783, 66.28643 },
        {614.61267, 2657.7495, 35.21646 },
        {657.28705, 2518.605, 31.07801 }
    },
    {
        {-858.71814, 2308.6233, 157.31444 },
        {-692.47766, 2371.2849, 128.70935 },
        {-706.64282, 2465.4456, 118.98036 },
        {-563.33154, 2363.8889, 77.08874 }
    },
    {
        {-288.59714, 1949.0719, 78.33427 },
        {-307.95374, 2032.2424, 81.16876 },
        {-389.48993, 1995.7036, 91.0205 },
        {-339.3429, 1951.5602, 85.17629 }
    },
    {
        {-339.60599, 1171.1465, 19.21433 },
        {-335.20911, 1099.8363, 19.06279 },
        {-252.34824, 1018.4837, 19.06279 },
        {-131.34566, 1016.9965, 19.21123 }
    },
	{
        {2256.0195, -779.48621, 128.22139},
        {2112.0718, -768.34485, 101.65751},
        {1977.6061, -713.31116, 121.48573},
        {1816.3575, -658.62585, 85.18586}
    },
    {
        {1635.4126, -1202.7582, 52.43358},
        {1768.1464, -1046.178, 42.50657},
        {1622.9996, -963.97345, 29.07026},
        {1461.6337, -942.56, 35.51653}
    },
    {
        {1120.0702, -768.03198, 108.87817},
        {932.03052, -832.17505, 94.10288},
        {828.71667, -873.76324, 68.43829},
        {759.63361, -935.36615, 55.40654}
    },
    {
        {433.53015, -1015.8671, 92.67198},
        {579.69708, -1029.7286, 71.16869},
        {473.35916, -1074.2974, 81.45515},
        {373.98621, -1153.7732, 77.90882}
    },
    {
        {131.97745, -1298.564, 47.33019},
        {158.52437, -1420.4174, 41.47634},
        {97.2663, -1508.2134, 7.63179},
        {-20.49128, -1517.8588, 1.63549}
    },
    {
        {-873.76715, -2669.8306, 96.96505},
        {-1043.254, -2680.813, 44.60667},
        {-1176.0515, -2639.5959, 11.32415},
        {-1306.0552, -2633.042, 11.6117}
    },
    {
        {-1552.5258, -2676.7715, 61.90138},
        {-1741.1187, -2540.5107, 4.18409},
        {-1790.1189, -2415.0786, 26.81357},
        {-1760.5959, -2307.6533, 43.47715}
    },
    {
        {-1646.6683, -2343.7532, 48.74955},
        {-1473.5215, -2323.2366, 10.50425},
        {-1504.0775, -2158.8071, 2.47378},
        {-1605.105, -2244.064, 26.7989}
    },
    {
        {-792.42334, -2470.8076, 77.14869},
        {-977.04767, -2364.6624, 66.13662},
        {-1190.641, -2354.8979, 19.07442},
        {-1292.9526, -2208.7344, 21.59551}
    },
    {
        {-1615.7986, -1939.2751, 98.35764},
        {-1846.5511, -1927.4489, 89.57227},
        {-1958.1165, -1982.6151, 78.927},
        {-1721.1787, -2096.8025, 41.39744}
    },
    {
        {-1996.8998, -1532.7334, 84.16791},
        {-2016.7778, -1760.0712, 90.45233},
        {-2097.5701, -1879.5818, 110.05237},
        {-2206.802, -2088.9785, 77.42064}
    },
    {
        {-2710.2432, -1845.1064, 148.16522},
        {-2624.9138, -2014.223, 125.28979},
        {-2555.885, -2072.3533, 129.27499},
        {-2352.0615, -2102.8882, 112.04118}
    },
	{
        {1821.6847, -1737.601, 13.03204},
        {1821.6525, -1623.5358, 13.03204},
        {1970.2682, -1622.4557, 15.61798},
        {2041.7034, -1612.3746, 13.03204}
    },
    {
        {1959.1172, -1463.4248, 13.1044},
        {1934.2491, -1405.1948, 13.28162},
        {1885.4894, -1392.824, 13.28162},
        {1849.3313, -1380.5691, 13.10193}
    },
    {
        {2017.7023, -1161.146, 21.22723},
        {1972.8401, -1157.2281, 20.61728},
        {1885.1533, -1206.4882, 18.88252},
        {1994.8082, -1231.983, 20.22103}
    },
    {
        {2362.5452, -1073.8689, 53.20577},
        {2176.1946, -1007.1118, 62.53755},
        {2219.1631, -1110.8278, 25.75209},
        {2211.9819, -1164.7034, 25.48303}
    },
    {
        {1278.8361, -609.80878, 102.01963},
        {1379.5923, -490.04926, 49.41511},
        {1546.574, -430.64697, 33.99444},
        {1727.9414, -544.01288, 35.12001}
    },
    {
        {1278.9913, -610.54553, 102.02225},
        {1378.3047, -490.67969, 49.71261},
        {1543.7986, -436.93918, 33.98998},
        {1693.0125, -600.24255, 39.00363}
    },
    {
        {1737.5022, -263.08591, 82.58534},
        {1625.8705, -257.76669, 43.09345},
        {1522.9658, -280.13763, 10.49823},
        {1408.2076, -291.92957, 1.69607}
    },
    {
        {1817.3961, 191.97659, 29.6135},
        {2054.5698, 105.52989, 27.39454},
        {2125.7632, 95.59256, 35.13731},
        {2215.2241, 85.34546, 26.05476}
    },
    {
        {2598.3206, 214.48622, 59.00151},
        {2441.9106, 233.85533, 28.85563},
        {2381.675, 295.40753, 19.11121},
        {2343.5996, 340.30804, 25.53667}
    },
    {
        {1805.0232, -483.4043, 81.77264},
        {1882.947, -625.65015, 71.10582},
        {1990.1289, -653.14459, 81.07644},
        {2024.5186, -616.35645, 65.16877}
    },
	{
		{2322.6448, 1083.7393, 85.58672},
		{2312.2017, 1130.7776, 79.20391},
		{2266.728, 1164.0212, 79.20391},
		{2209.5186, 1144.0837, 79.20391}
	},
	{	
		{2187.3706, 1291.3784, 10.38318},
		{2186.7319, 1174.7025, 10.65991},
		{2129.6279, 1142.9526, 13.22136},
		{2073.0981, 1172.3523, 10.38318}
	},
	{	
		{2048.7458, 1453.2974, 10.33385},
		{1986.6564, 1413.8519, 8.77135},
		{1947.4467, 1369.8026, 8.77135},
		{1992.6843, 1273.9396, 10.33385}
	},
	{	
		{1795.7334, 1584.4512, 6.47413},
		{1908.0745, 1558.5215, 10.57678},
		{1908.7087, 1468.6941, 10.57678},
		{1969.3174, 1465.1251, 10.57678}
	},
	{	
		{1890.2538, 1608.4805, 22.58318},
		{1968.4323, 1588.043, 22.58166},
		{1971.7114, 1669.6782, 22.58166},
		{1895.7141, 1644.0581, 22.58318}
	},
	{	
		{2036.0099, 1713.3018, 10.44201},
		{2192.3613, 1679.433, 12.13732},
		{2127.3662, 1650.7299, 10.45764},
		{2068.3254, 1615.2213, 10.44201}
	},
	{	
		{2146.3645, 2162.823, 10.23821},
		{2162.4075, 2285.9768, 10.23821},
		{2134.1921, 2347.5024, 10.23821},
		{2128.2581, 2224.9229, 10.23821}
	},
	{	
		{2310.1886, 2496.1513, -7.88274},
		{2242.6912, 2492.2656, 2.8364},
		{2308.0186, 2446.9761, 2.84382},
		{2348.2844, 2413.3125, 10.24226}
	},
	{	
		{1429.319, 2815.8901, 10.01728},
		{1364.2477, 2814.0225, 10.01728},
		{1305.007, 2753.4116, 10.01728},
		{1230.0012, 2839.3076, 10.01728}
	},
	{	
		{1123.5089, 2771.1206, 9.9497},
		{1181.0031, 2771.74, 9.9497},
		{1230.7363, 2809.9814, 9.9497},
		{1370.0348, 2760.6252, 9.9497}
	},
	{	
		{693.79016, 2775.9807, 85.56375},
		{589.48083, 2758.7476, 74.5735},
		{495.40225, 2777.0503, 68.65125},
		{409.68011, 2767.7354, 79.50363}
	},
	{
		{2737.875, -1760.0681, 43.79646},
		{2738.8076, -1817.1658, 38.79257},
		{2676.5481, -1757.6438, 37.85269},
		{2738.4331, -1699.8928, 38.04371}
	},
	{
		{2940.573, -2051.5171, 3.25935},
		{2893.5903, -2038.2557, 4.17223},
		{2898.4595, -1877.0524, 2.34684},
		{2877.8081, -1789.5966, 2.65365}
	},
	{
		{2228.5151, -1977.4323, 13.20613},
		{2140.5415, -1974.9698, 13.20885},
		{2010.728, -1955.8495, 13.20885},
		{1961.6997, -2004.0703, 13.05256}
	},
	{
		{1959.3254, -1463.5343, 13.1496},
		{1939.8488, -1425.7079, 10.11584},
		{1883.7415, -1427.0133, 10.11584},
		{1908.6786, -1387.8827, 10.11584}
	},
	{
		{1967.2938, -1372.3701, 18.47582},
		{1876.5413, -1362.6604, 14.48728},
		{1878.1907, -1390.9938, 13.37853},
		{1901.0609, -1444.28, 13.30937}
	},
	{
		{1738.5814, -1349.9506, 15.53181},
		{1777.2126, -1358.6858, 15.52795},
		{1783.0518, -1412.2512, 15.52795},
		{1800.3311, -1457.8582, 13.12826}
	},
	{
		{1588.3978, -1508.2367, 37.29124},
		{1664.2528, -1476.2388, 24.78491},
		{1602.0098, -1362.4595, 28.69015},
		{1678.5354, -1546.5952, 23.77778}
	},
	{
		{1705.4183, -1547.7062, 12.9532},
		{1594.496, -1536.7333, 13.16657},
		{1547.9661, -1497.6075, 13.12507},
		{1447.0585, -1496.7235, 12.94575}
	},
	{
		{1454.7869, -1168.363, 22.91025},
		{1454.9825, -1433.3624, 12.57978},
		{1407.9032, -1420.0591, 13.40009},
		{1352.4677, -1400.6656, 12.50566}
	},
	{
		{1307.5697, -1400.5361, 12.38524},
		{1219.6086, -1379.408, 12.47576},
		{1230.9178, -1295.1606, 12.56134},
		{1240.1576, -1380.1306, 12.4486}
	},
	{
		{2536.9255, -1047.8323, 69.06329},
		{2425.6172, -1036.2102, 52.32125},
		{2317.9009, -1078.8829, 48.78068},
		{2195.9878, -1011.7744, 61.79865}
	},
	{
		{1908.9456, -1021.5282, 35.14033},
		{2076.1812, -1045.4589, 31.80688},
		{2146.2974, -1105.5709, 24.93432},
		{2076.2029, -1092.5936, 24.55243}
	},
	{
		{1907.7224, -1021.5203, 35.17107},
		{2079.3848, -1047.6058, 31.08582},
		{2143.147, -1129.217, 25.26207},
		{2173.8606, -1220.4996, 23.49323}
	},
	{
		{2371.1177, -1190.3789, 27.18615},
		{2366.052, -1290.4185, 23.59378},
		{2339.7793, -1319.1335, 23.89755},
		{2335.7483, -1384.8153, 23.58459}
	},
	{
		{2371.6211, -1327.6603, 23.64335},
		{2395.8374, -1437.0206, 23.64416},
		{2448.679, -1461.2052, 23.80822},
		{2542.6594, -1461.6445, 23.82266}
	},
	{
		{2580.5308, -1444.4451, 34.51915},
		{2443.8188, -1444.5771, 23.59826},
		{2417.4485, -1484.3352, 23.59826},
		{2396.5706, -1511.5271, 23.59826}
	},
	{
		{2493.6213, -1682.465, 12.9044},
		{2419.4229, -1678.5927, 13.27494},
		{2413.8621, -1718.6882, 13.29844},
		{2364.198, -1719.7954, 13.12237}
	},
	{
		{797.43951, -1111.065, 23.33447},
		{767.69269, -1206.814, 13.11726},
		{767.07123, -1259.1426, 13.1428},
		{744.25464, -1292.3922, 13.12969}
	},
	{
		{416.75981, -1449.7265, 30.50634},
		{503.49625, -1434.3702, 14.33131},
		{483.5864, -1514.6448, 19.48274},
		{561.30609, -1586.5248, 15.21259}
	},
	{
		{-761.04913, -2433.9509, 66.97295},
		{-677.84259, -2244.6389, 11.72227},
		{-418.00201, -2196.3074, 56.39995},
		{-267.14941, -2084.2131, 37.37173}
	},
	{
		{-395.23395, -2603.0781, 143.28751},
		{-387.93411, -2476.8369, 102.54589},
		{-433.05338, -2395.6169, 81.8108},
		{-523.92706, -2343.6821, 47.40185}
	},
		{
		{-546.20001, -189.60001, 78.1},
		{-358.70001, -151.2, 54.5},
		{-398.89999, 19, 35.1},
		{-221.60001, 120.7, 2.1}
	},
	{
		{-513.59998, -190.8, 78},
		{-489.89999, 25.1, 47.5},
		{-607, 168.7, 20.2},
		{-765.20001, 191.3, 2.3}
	},
	{
		{-512.70001, -87.3, 61.8},
		{-612.29999, -1.5, 59.9},
		{-629.5, 122.9, 35.1},
		{-622.59998, 235.10001, 19.2}
	},
	{
		{-781.20001, -102.3, 64.4},
		{-719.29999, 5, 59.3},
		{-876.59998, -16.4, 33},
		{-765.79999, 119.4, 12}
	},
	{
		{-782.29999, -766.09998, 156.89999},
		{-941.70001, -993.70001, 130},
		{-945.20001, -1164.8, 128.89999},
		{-910.29999, -1280.9, 141}
	},
	{
		{-929.59998, -1396.3, 127},
		{-844.5, -1557.7, 127.6},
		{-871.40002, -1625.2, 112.4},
		{-960.90002, -1658.7, 74.7}
	},
	{
		{-1125.3, -1337.1, 127.5},
		{-1137.4, -1232.2, 128.8},
		{-1219.7, -1224.6, 129.3},
		{-1250.4, -1193.2, 124.9}
	},
	{
		{-1548.3, -1149.8, 136.60001},
		{-1519.7, -978.40002, 171.3},
		{-1349.7, -1028.6, 175.8},
		{-1429.5, -964, 200.5}
	},
	{
		{-1468.2, -260.39999, 25.6},
		{-1410.6, -146.3, 26.5},
		{-1418.1, -255.60001, 25.6},
		{-1341.3, -355, 25.6}
	},
	{
		{-1747.4, -30.3, 3.7},
		{-1663.9, 11.1, 3.7},
		{-1537.3, 114.3, 17.5},
		{-1580.4, 47.4, 17.5}
	},
	{
		{-1606.4, 135.3, -11.7},
		{-1685.6, 56.1, -8.7},
		{-1599.8, 140.10001, -11.3},
		{-1706.2, 60.8, 3.1}
	},
	{
		{-1714.8, 619.90002, 24.4},
		{-1711.6, 717.70001, 24.4},
		{-1660.3, 739.90002, 17.3},
		{-1657.4, 845.79999, 18.3}
	},
	{
		{-2606.8, 989, 77.9},
		{-2577.7, 1162.5, 55.1},
		{-2435.6001, 1156.6, 55.1},
		{-2335.8999, 1166.6, 45.5}
	},
	{
		{-2264.2, 1176.4, 54.6},
		{-2462.6001, 1210.4, 34.1},
		{-2669.3, 1289.4, 6},
		{-2772.3999, 1290.7, 5.3}
	},
	{
		{-2766.3999, 2349.7, 73.4},
		{-2705.3999, 2367.8, 69.7},
		{-2637.8999, 2504.6001, 28.2},
		{-2503.7, 2421.5, 15.6}
	},
	{
		{-1584.9, 2488.1001, 66.6},
		{-1624.9, 2665.8, 53.9},
		{-1553.3, 2671.2, 55},
		{-1546, 2603.6001, 55}
	},
	{
		{-1348.9, 2332.6001, 95.4},
		{-1290.6, 2218.2, 99.4},
		{-1177.9, 2244.5, 100},
		{-1098.1, 2344.1001, 86}
	}
}
local v = {}
local offsets = {250, 500, 1000, 1250, 1500, 2000, 2250, 2500, 2750, 3250, 3500}
local errors = {3, 37, 41, 45, 46}
local enteredPlayers = {}
local RIP = {}
local r = 1
local threshold = 1
local reset = true

local function shuffleTable(t)
    local size = #t
    for i = size, 2, -1 do
        local j = math.random(i)
        t[i], t[j] = t[j], t[i]
    end
end

function mapStarting(newState,oldState)
	if (newState == "GridCountdown") then
		shuffleTable(c)
		triggerClientEvent ( root, "prestartup", root )
	end
	if (newState == "Running" and oldState == "GridCountdown") then
		math.randomseed(os.time())
		local fig = math.random()
		if fig >= 0.92 then
			triggerClientEvent ( root, "clearVar", root, offsets, errors)
		end
		triggerClientEvent ( root, "startup", root )
		setTimer ( function()
			newRace()
		end, 5000, 1)
	end
end
addEvent("onRaceStateChanging")
addEventHandler("onRaceStateChanging",root,mapStarting)

function MarkerHit(hitElement, matchingDimension)
    if getElementType(hitElement) == "player" and matchingDimension then
		if enteredPlayers[hitElement] == 0 then
			if source == d1 then
				playSoundFrontEnd(hitElement, 43)
				setElementVisibleTo (m1, hitElement, false)
				setElementVisibleTo (d1, hitElement, false)
				setElementVisibleTo (b1, hitElement, false)
				setElementVisibleTo (d3, hitElement, true)
				setElementVisibleTo (b3, hitElement, true)
				setBlipSize (b2, 3)
				setBlipSize (b3, 1)
				enteredPlayers[hitElement] = 1
				setMarkerTarget(m2, c[r][4][1], c[r][4][2], c[r][4][3])
				triggerClientEvent (hitElement, "finishCheckpoint", hitElement , v)
			end
		end
		if enteredPlayers[hitElement] == 1 then
			if source == d2 then
				playSoundFrontEnd(hitElement, 43)
				setElementVisibleTo (m2, hitElement, false)
				setElementVisibleTo (d2, hitElement, false)
				setElementVisibleTo (b2, hitElement, false)
				triggerClientEvent (hitElement, "finishCheckpointIcon", hitElement)
				setBlipSize (b3, 3)
				enteredPlayers[hitElement] = 2
			end
		end
		if enteredPlayers[hitElement] == 2 then
			if source == d3 then
				if #playersAtD3 < threshold then
					table.insert(playersAtD3, hitElement)
					checkPlayersStatus()
					playSoundFrontEnd(hitElement, 43)
					setElementVisibleTo (d3, hitElement, false)
					setElementVisibleTo (b3, hitElement, false)
					triggerClientEvent (hitElement, "destroyFinishCheckpoint", hitElement)
					enteredPlayers[hitElement] = 3
					local veh = getPedOccupiedVehicle(hitElement)
					if veh then
						setElementFrozen(veh, true)
						setVehicleDamageProof (veh, true)
					end
					if threshold >= 2 then 
						triggerClientEvent ( hitElement, "qualified", hitElement)
					else
						triggerClientEvent ( hitElement, "WINNER", hitElement)
						local winName = string.gsub(getPlayerName(hitElement), "#%x%x%x%x%x%x", "")
						outputChatBox("#3351C4> > > > > > > > > > > " .. "#FEB729" .. winName .. " WINS" .. "#F163E9 < < < < < < < < < < <", root,255,255,255, true)
						triggerClientEvent (root, "timeSwitchOffEnd", root)
					end
				end
			end
		end
	end
end
addEventHandler("onMarkerHit", getRootElement(), MarkerHit)

function newRace()
	reset = true
	playersAtD3 = {}
	timeLimit = setTimer( function()
		timeUp()
	end, 34000, 1)
	alive = getAlivePlayers()
	if #alive >= 40 then 
		threshold = math.floor(0.7*#alive)
	elseif #alive < 40 and #alive >= 5	then
		threshold = math.floor(0.8*#alive)
	elseif #alive <= 4 then 
		threshold = #alive - 1
	end
	if threshold == 0 then threshold = 1 end
	if m1 and isElement(m1) then
		destroyElement(m1); m1 = nil
		destroyElement(m2); m2 = nil
		destroyElement(m3); m3 = nil
		destroyElement(d1); d1 = nil
		destroyElement(d2); d2 = nil
		destroyElement(d3); d3 = nil
		destroyElement(b1); b1 = nil
		destroyElement(b2); b2 = nil
		destroyElement(b3); b3 = nil
	end
	m1 = createMarker(c[r][2][1], c[r][2][2], c[r][2][3], "checkpoint", 6, 51, 81, 196,  150)-- , getRootElement(), true) -- extra bits for the new createMarker argument, "ignoreAlphaLimits"
	m2 = createMarker(c[r][3][1], c[r][3][2], c[r][3][3], "checkpoint", 6, 254, 183, 41, 150)-- , getRootElement(), true)
	m3 = createMarker(c[r][4][1], c[r][4][2], c[r][4][3], "checkpoint", 6, 241, 99, 233, 150)-- , getRootElement(), true)
	d1 = createMarker(c[r][2][1], c[r][2][2], c[r][2][3], "checkpoint", 9, 51, 81, 196,  0)-- , getRootElement(), true)
	d2 = createMarker(c[r][3][1], c[r][3][2], c[r][3][3], "checkpoint", 9, 254, 183, 41, 0)-- , getRootElement(), true)
	d3 = createMarker(c[r][4][1], c[r][4][2], c[r][4][3], "checkpoint", 9, 241, 99, 233, 0)-- , getRootElement(), true)
	b1 = createBlip (c[r][2][1], c[r][2][2], c[r][2][3], 0, 2, 51, 81, 196)
	b2 = createBlip (c[r][3][1], c[r][3][2], c[r][3][3], 0, 2, 254, 183, 41)
	b3 = createBlip (c[r][4][1], c[r][4][2], c[r][4][3], 0, 2, 241, 99, 233)
	setElementVisibleTo (m1, root, false)
	setElementVisibleTo (m2, root, false)
	setElementVisibleTo (m3, root, false)
	setElementVisibleTo (d1, root, false)
	setElementVisibleTo (d2, root, false)
	setElementVisibleTo (d3, root, false)
	setElementVisibleTo (b1, root, false)
	setElementVisibleTo (b2, root, false)
	setElementVisibleTo (b3, root, false)
	setMarkerTarget(m1, c[r][3][1], c[r][3][2], c[r][3][3])
	v[1] = c[r]
	if math.abs(c[r][1][1] - c[r][2][1]) > math.abs(c[r][1][2] - c[r][2][2]) then
		if (c[r][1][1] - c[r][2][1]) > 0 then
			carRot = 90
		elseif (c[r][1][1] - c[r][2][1]) < 0 then
			carRot = -90
		end
	elseif math.abs(c[r][1][1] - c[r][2][1]) < math.abs(c[r][1][2] - c[r][2][2]) then
		if (c[r][1][2] - c[r][2][2]) > 0 then
			carRot = 180
		elseif (c[r][1][2] - c[r][2][2]) < 0 then
			carRot = 0
		end
	end
	local xx = c[r][2][1]
	local yy = c[r][2][2]
	if carRot == 0 then 
		yy = yy + 50
	elseif carRot == 180 then
		yy = yy - 50
	elseif carRot == 90 then
		xx = xx + 50
	elseif carRot == -90 then
		xx = xx - 50
	end
	triggerClientEvent (root, "timeSwitchOff", root)
	triggerClientEvent (root, "finishedPlayers", root, #playersAtD3)
	triggerClientEvent (root, "alivePlayersFunc", root, threshold, #alive)
	local players = getElementsByType ("player") 
	for theKey,thePlayer in ipairs(players) do 
		if (isPedInVehicle (thePlayer)) then 
			local veh = getPedOccupiedVehicle(thePlayer)
			if veh then
				setElementFrozen(veh, true)
				setElementPosition(veh, c[r][1][1], c[r][1][2], c[r][1][3]+1)
				setElementRotation(veh, 0, 0, carRot)
				setCameraMatrix(thePlayer, c[r][1][1], c[r][1][2], c[r][1][3], xx, yy, c[r][1][3])
				setCameraTarget(thePlayer)
				setTimer ( function()
					playSoundFrontEnd(thePlayer, 44)
				end, 1000, 3)
				setTimer(function()
					setElementFrozen(veh, false)
					setVehicleDamageProof(veh, false)
					triggerClientEvent (thePlayer, "timeFunc", thePlayer)
					triggerClientEvent (thePlayer, "timeSwitchOn", thePlayer)
					playSoundFrontEnd(thePlayer, 45)
				end, 4000, 1)
			end
			enteredPlayers[thePlayer] = 0
			setElementVisibleTo (m1, thePlayer, true)
			setElementVisibleTo (m2, thePlayer, true)
			setElementVisibleTo (d1, thePlayer, true)
			setElementVisibleTo (d2, thePlayer, true)
			setElementVisibleTo (b1, thePlayer, true)
			setElementVisibleTo (b2, thePlayer, true)
			setBlipSize (b1, 3)
			setBlipSize (b2, 1)
			if enteredPlayers[thePlayer] == nil then enteredPlayers[thePlayer] = 0 end
	   end
	   if tableContains(RIP, thePlayer) then
			setElementVisibleTo (m1, thePlayer, true)
			setElementVisibleTo (m2, thePlayer, true)
			setElementVisibleTo (m3, thePlayer, true)
	   end
	end
end

function checkPlayersStatus()
	local alivePlayers = getAlivePlayers()
	triggerClientEvent(root, "finishedPlayers", root, #playersAtD3)
	if #playersAtD3 >= threshold then
		setElementVisibleTo (m1, root, false)
		setElementVisibleTo (m2, root, false)
		setElementVisibleTo (m3, root, false)
		setElementVisibleTo (d1, root, false)
		setElementVisibleTo (d2, root, false)
		setElementVisibleTo (d3, root, false)
		setElementVisibleTo (b1, root, false)
		setElementVisibleTo (b2, root, false)
		setElementVisibleTo (b3, root, false)
		triggerClientEvent (root, "destroyFinishCheckpoint", root)
		while (#playersAtD3 > threshold) do
			table.remove(playersAtD3)
		end
		for i, player in ipairs(alivePlayers) do
			if not tableContains(playersAtD3, player) then
				if not tableContains(RIP, player) then
					killPed(player, player)
					triggerClientEvent (player, "Eliminated", player)
					table.insert(RIP, player)
				end
			end
		end
		if reset then
			killTimer(timeLimit)
			if threshold >= 2 then
				setTimer( function()
					r = r + 1
					if r > #c then r = 1 end
					newRace()
				end, 2000, 1)
			end
			reset = false
		end
	end
end

function tableContains(table, element)
    for _, value in pairs(table) do
        if value == element then
            return true
        end
    end
    return false
end

function thresholdUpdate()
	local aliveNow = getAlivePlayers()
	if #aliveNow < threshold then
		threshold = #aliveNow
		if threshold <= 0 then
			threshold = 1
		end
		triggerClientEvent (root, "alivePlayersFunc", root, threshold)
		checkPlayersStatus()
	end
end

function timeUp()
	local alivePlayers = getAlivePlayers()
	for i, player in ipairs(alivePlayers) do
		if not tableContains(playersAtD3, player) then
			if not tableContains(RIP, player) then
				killPed(player, player)
				triggerClientEvent ( player, "Eliminated", player)
				table.insert(RIP, player)
			end
			if #playersAtD3 >= 2 then
				setTimer( function()
					r = r + 1
					if r > #c then r = 1 end
					newRace()
				end, 2000, 1)
			end
		end
	end
end

function killedPlayers()
	if not tableContains(RIP, source) then
		table.insert(RIP, source)
		setElementVisibleTo (m1, source, true)
		setElementVisibleTo (m2, source, true)
		setElementVisibleTo (m3, source, true)
	end
	thresholdUpdate()
end
addEventHandler ( "onPlayerWasted", root, killedPlayers )
